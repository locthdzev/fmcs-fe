import * as ExcelJS from "exceljs";
import { saveAs } from "file-saver";
import dayjs from "dayjs";
import { message } from "antd";
import { ExportConfig } from "./PeriodicHealthCheckupExcelModal";
import { EnhancedStudentCheckup, EnhancedStaffCheckup } from "./PeriodicHealthCheckupManagement";

export async function exportPeriodicHealthCheckupToExcel(
  studentCheckups: EnhancedStudentCheckup[],
  staffCheckups: EnhancedStaffCheckup[],
  config: ExportConfig,
  dateRange?: [dayjs.Dayjs | null, dayjs.Dayjs | null]
): Promise<void> {
  try {
    // Create workbook and worksheet
    const workbook = new ExcelJS.Workbook();
    workbook.creator = "FMCS";
    workbook.created = new Date();

    // Add info sheet
    const infoSheet = workbook.addWorksheet("Export Information");
    setupSheetHeaders(infoSheet, ["Information", "Value"]);

    // Add export info
    const now = new Date();
    const exportInfo = [
      { info: "Export Date", value: now.toLocaleDateString() },
      { info: "Export Time", value: now.toLocaleTimeString() },
      {
        info: "Date Range",
        value:
          dateRange && dateRange[0] && dateRange[1]
            ? `${dateRange[0].format("YYYY-MM-DD")} to ${dateRange[1].format(
                "YYYY-MM-DD"
              )}`
            : "All Time",
      },
      {
        info: "Student Checkups",
        value: config.includeStudentCheckups ? studentCheckups.length : "Not included",
      },
      {
        info: "Staff Checkups",
        value: config.includeStaffCheckups ? staffCheckups.length : "Not included",
      },
      { info: "Generated By", value: "FMCS System" },
    ];

    exportInfo.forEach((item) => {
      const row = infoSheet.addRow([item.info, item.value]);
      styleDataRow(row);
    });

    // Create summary sheet
    const summarySheet = workbook.addWorksheet("Summary");
    setupSheetHeaders(summarySheet, ["Metric", "Value"]);

    // Add summary data
    const studentActiveCount = studentCheckups.filter(
      (checkup) => checkup.status !== "Inactive"
    ).length;
    const staffActiveCount = staffCheckups.filter(
      (checkup) => checkup.status !== "Inactive"
    ).length;

    const summaryData = [
      { metric: "Total Student Checkups", value: studentCheckups.length },
      { metric: "Active Student Checkups", value: studentActiveCount },
      { metric: "Inactive Student Checkups", value: studentCheckups.length - studentActiveCount },
      { metric: "Total Staff Checkups", value: staffCheckups.length },
      { metric: "Active Staff Checkups", value: staffActiveCount },
      { metric: "Inactive Staff Checkups", value: staffCheckups.length - staffActiveCount },
      { metric: "Combined Total Checkups", value: studentCheckups.length + staffCheckups.length },
    ];

    summaryData.forEach((item) => {
      const row = summarySheet.addRow([item.metric, item.value]);
      styleDataRow(row);
    });

    // Export student checkups if included
    if (config.includeStudentCheckups && studentCheckups.length > 0) {
      const studentSheet = workbook.addWorksheet("Student Checkups");
      
      // Define columns based on config
      const studentColumns = getStudentColumns(config);
      setupSheetHeaders(studentSheet, studentColumns.map(c => c.header));
      
      // Add data rows
      studentCheckups.forEach(checkup => {
        const rowData = studentColumns.map(column => getCheckupValue(checkup, column.key));
        const row = studentSheet.addRow(rowData);
        styleDataRow(row);
      });
    }

    // Export staff checkups if included
    if (config.includeStaffCheckups && staffCheckups.length > 0) {
      const staffSheet = workbook.addWorksheet("Staff Checkups");
      
      // Define columns based on config
      const staffColumns = getStaffColumns(config);
      setupSheetHeaders(staffSheet, staffColumns.map(c => c.header));
      
      // Add data rows
      staffCheckups.forEach(checkup => {
        const rowData = staffColumns.map(column => getCheckupValue(checkup, column.key));
        const row = staffSheet.addRow(rowData);
        styleDataRow(row);
      });
    }

    // Add export title with timestamp to each sheet
    workbook.eachSheet((sheet) => {
      addExportHeader(
        sheet,
        `Periodic Health Checkup Report - Exported on ${now.toLocaleDateString()} at ${now.toLocaleTimeString()}`
      );
    });

    // Generate filename with date
    const dateStr =
      dateRange && dateRange[0] && dateRange[1]
        ? `_${dateRange[0].format("YYYY-MM-DD")}_to_${dateRange[1].format(
            "YYYY-MM-DD"
          )}`
        : "_all_time";
    const fileName = `periodic_health_checkup_report${dateStr}.xlsx`;

    // Export to file
    const buffer = await workbook.xlsx.writeBuffer();
    const blob = new Blob([buffer], {
      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    });
    saveAs(blob, fileName);

    message.success("Excel file has been downloaded successfully");
    return Promise.resolve();
  } catch (error) {
    console.error("Error exporting to Excel:", error);
    message.error("Failed to export Excel file");
    return Promise.reject(error);
  }
}

// Helper function to set up sheet headers
function setupSheetHeaders(sheet: ExcelJS.Worksheet, headers: string[]) {
  // Add headers
  const headerRow = sheet.addRow(headers);
  
  // Set column widths based on headers
  headers.forEach((header, index) => {
    const col = sheet.getColumn(index + 1);
    col.width = getColumnWidth(header);
  });
  
  // Style header row
  headerRow.height = 25;
  headerRow.eachCell((cell) => {
    cell.font = { bold: true, color: { argb: "FFFFFFFF" } };
    cell.fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "FF1677FF" }, // Primary blue color
    };
    cell.alignment = { vertical: "middle", horizontal: "center" };
    cell.border = {
      top: { style: "thin" },
      left: { style: "thin" },
      bottom: { style: "thin" },
      right: { style: "thin" },
    };
  });
}

// Helper function to style data rows
function styleDataRow(row: ExcelJS.Row) {
  row.height = 22;
  row.eachCell({ includeEmpty: true }, (cell) => {
    cell.border = {
      top: { style: "thin" },
      left: { style: "thin" },
      bottom: { style: "thin" },
      right: { style: "thin" },
    };
    cell.alignment = { vertical: "middle", horizontal: "left" };
  });
}

// Helper function to add export header
function addExportHeader(sheet: ExcelJS.Worksheet, title: string) {
  sheet.insertRow(1, []);
  sheet.insertRow(1, [title]);
  sheet.getRow(1).font = { bold: true, size: 14 };
  sheet.getRow(1).height = 30;
  sheet.mergeCells(`A1:${String.fromCharCode(64 + sheet.columns.length)}1`);
  sheet.getCell("A1").alignment = { horizontal: "center", vertical: "middle" };
}

// Helper function to get value from a checkup object
function getCheckupValue(checkup: any, key: string): any {
  const parts = key.split('.');
  let value = checkup;
  
  for (const part of parts) {
    if (value === null || value === undefined) return '';
    value = value[part];
  }
  
  // Format dates
  if (typeof value === 'string' && value.match(/^\d{4}-\d{2}-\d{2}T/)) {
    return dayjs(value).format('YYYY-MM-DD');
  }
  
  // Format booleans
  if (typeof value === 'boolean') {
    return value ? 'Yes' : 'No';
  }
  
  return value === null || value === undefined ? '' : value;
}

// Function to determine column width based on content type
function getColumnWidth(header: string): number {
  // Wider columns for text-heavy fields
  const wideColumns = [
    'Conclusion', 'Recommendations', 'Description', 'Internal Medicine Status',
    'Surgery Status', 'Dermatology Status', 'General Exam', 'Eye Exam',
    'Dental Exam', 'ENT Exam', 'Eye Pathology', 'Abdominal Ultrasound', 
    'Dermatology Examination', 'Gynecological Examination'
  ];
  
  // Extra wide columns
  const extraWideColumns = [
    'Recommendations', 'Conclusion', 'Description'
  ];
  
  // Medium width columns
  const mediumColumns = [
    'Full Name', 'Hospital Name', 'Periodic Health Checkup ID',
    'Email', 'Blood Pressure', 'Created By', 'Updated By'
  ];
  
  if (extraWideColumns.some(col => header.includes(col))) {
    return 35; // Extra wide
  }
  
  if (wideColumns.some(col => header.includes(col))) {
    return 25; // Wide
  }
  
  if (mediumColumns.some(col => header.includes(col))) {
    return 22; // Medium
  }
  
  return 20; // Default width
}

// Student columns definition based on config
function getStudentColumns(config: ExportConfig) {
  const columns: { header: string; key: string }[] = [];
  
  if (config.includeBasicInfo) {
    columns.push(
      { header: "ID", key: "id" },
      { header: "Periodic Health Checkup ID", key: "periodicHealthCheckUpId" },
      { header: "Student ID", key: "mssv" },
      { header: "Full Name", key: "fullName" },
      { header: "Gender", key: "gender" },
      { header: "Status", key: "status" },
      { header: "Conclusion", key: "conclusion" },
    );
  }
  
  if (config.includeHealthMetrics) {
    columns.push(
      { header: "Height (cm)", key: "heightCm" },
      { header: "Weight (kg)", key: "weightKg" },
      { header: "BMI", key: "bmi" },
      { header: "Blood Pressure", key: "bloodPressure" },
      { header: "Pulse Rate", key: "pulseRate" },
    );
  }
  
  if (config.includeSpecialistExams) {
    columns.push(
      { header: "Internal Medicine Status", key: "internalMedicineStatus" },
      { header: "Surgery Status", key: "surgeryStatus" },
      { header: "Dermatology Status", key: "dermatologyStatus" },
      { header: "ENT Status", key: "entStatus" },
      { header: "Dental/Oral Status", key: "dentalOralStatus" },
    );
  }
  
  if (config.includeDetailedMeasurements) {
    columns.push(
      { header: "Right Eye Score", key: "eyeRightScore" },
      { header: "Left Eye Score", key: "eyeLeftScore" },
      { header: "Eye Pathology", key: "eyePathology" },
    );
  }
  
  if (config.includeRecommendations) {
    columns.push(
      { header: "Recommendations", key: "recommendations" },
      { header: "Next Checkup Date", key: "nextCheckupDate" },
    );
  }
  
  if (config.includeCreatedInfo) {
    columns.push(
      { header: "Created At", key: "createdAt" },
      { header: "Created By", key: "createdBy" },
    );
  }
  
  if (config.includeUpdatedInfo) {
    columns.push(
      { header: "Updated At", key: "updatedAt" },
      { header: "Updated By", key: "updatedBy" },
    );
  }
  
  return columns;
}

// Staff columns definition based on config
function getStaffColumns(config: ExportConfig) {
  const columns: { header: string; key: string }[] = [];
  
  if (config.includeBasicInfo) {
    columns.push(
      { header: "ID", key: "id" },
      { header: "Periodic Health Checkup ID", key: "periodicHealthCheckUpId" },
      { header: "Full Name", key: "fullName" },
      { header: "Gender", key: "gender" },
      { header: "Status", key: "status" },
      { header: "Conclusion", key: "conclusion" },
      { header: "Hospital Name", key: "hospitalName" },
      { header: "Report Issuance Date", key: "reportIssuanceDate" },
    );
  }
  
  if (config.includeHealthMetrics) {
    columns.push(
      { header: "Blood Glucose", key: "bloodGlucose" },
      { header: "Cholesterol", key: "cholesterol" },
      { header: "HbA1c", key: "hbA1c" },
      { header: "Uric Acid", key: "uricAcid" },
      { header: "Triglycerides", key: "triglycerides" },
      { header: "HDL", key: "hdl" },
      { header: "LDL", key: "ldl" },
    );
  }
  
  if (config.includeLaboratoryTests) {
    columns.push(
      { header: "SGOT", key: "sgot" },
      { header: "SGPT", key: "sgpt" },
      { header: "GGT", key: "ggt" },
      { header: "Urea", key: "urea" },
      { header: "Creatinine", key: "creatinine" },
      { header: "Complete Blood Count", key: "completeBloodCount" },
      { header: "Complete Urinalysis", key: "completeUrinalysis" },
      { header: "Blood Type", key: "bloodType" },
      { header: "Rh Type", key: "rhType" },
    );
  }
  
  if (config.includeSpecialistExams) {
    columns.push(
      { header: "General Exam", key: "generalExam" },
      { header: "Eye Exam", key: "eyeExam" },
      { header: "Dental Exam", key: "dentalExam" },
      { header: "ENT Exam", key: "entExam" },
      { header: "Gynecological Exam", key: "gynecologicalExam" },
      { header: "Dermatology Exam", key: "dermatologyExam" },
    );
  }
  
  if (config.includeImagingResults) {
    columns.push(
      { header: "Abdominal Ultrasound", key: "abdominalUltrasound" },
      { header: "Thyroid Ultrasound", key: "thyroidUltrasound" },
      { header: "Breast Ultrasound", key: "breastUltrasound" },
      { header: "ECG", key: "ecg" },
      { header: "Chest X-Ray", key: "chestXRay" },
      { header: "Lumbar Spine X-Ray", key: "lumbarSpineXRay" },
      { header: "Cervical Spine X-Ray", key: "cervicalSpineXRay" },
    );
  }
  
  if (config.includeDetailedMeasurements) {
    columns.push(
      { header: "Total Calcium", key: "totalCalcium" },
      { header: "Liver AFP", key: "liverAfp" },
      { header: "Prostate PSA", key: "prostatePsa" },
      { header: "Colon CEA", key: "colonCea" },
      { header: "Stomach CA724", key: "stomachCa724" },
      { header: "Pancreas CA199", key: "pancreasCa199" },
      { header: "Breast CA153", key: "breastCa153" },
      { header: "Ovaries CA125", key: "ovariesCa125" },
      { header: "Lung Cyfra211", key: "lungCyfra211" },
      { header: "Ferritin", key: "ferritin" },
      { header: "Bone Density T-Score", key: "boneDensityTScore" },
    );
  }
  
  if (config.includeRecommendations) {
    columns.push(
      { header: "Recommendations", key: "recommendations" },
    );
  }
  
  if (config.includeCreatedInfo) {
    columns.push(
      { header: "Created At", key: "createdAt" },
      { header: "Created By", key: "createdBy" },
    );
  }
  
  if (config.includeUpdatedInfo) {
    columns.push(
      { header: "Updated At", key: "updatedAt" },
      { header: "Updated By", key: "updatedBy" },
    );
  }
  
  return columns;
} 